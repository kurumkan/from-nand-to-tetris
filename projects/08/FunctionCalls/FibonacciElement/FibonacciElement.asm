// bootstrap
   @256
	D=A
	@SP
	M=D
	@RETURN_ADDRESS_BOOTSTRAP
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@5
	D=A
	@n
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Sys.init
	0;JMP
(RETURN_ADDRESS_BOOTSTRAP)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
	@0
	D=A
	@ARG
	A=M+D
	D=M
	@SP
	A=M
	M=D
	@SP
	D=M+1
	@SP
	M=D
// push constant 2
	@2
	D=A
	@SP
	A=M
	M=D
	@SP
	D=M+1
	@SP
	M=D
// lt
	@SP
	D=M-1
	@SP
	M=D
	@SP
	A=M
	D=M
	@SP
	A=M-1
	D=M-D
	@LT_0
	D;JLT
	@SP
	A=M-1
	M=0
	@END_LT_0
	0;JMP
(LT_0)
	@SP
	A=M-1
	M=-1
(END_LT_0)
// if-goto IF_TRUE
   @SP
	D=M-1
	@SP
	M=D
	@SP
	A=M
	D=M
	@IF_TRUE
	D;JNE
// goto IF_FALSE
	@IF_FALSE
	0;JMP
// label IF_TRUE
(IF_TRUE)
// push argument 0
	@0
	D=A
	@ARG
	A=M+D
	D=M
	@SP
	A=M
	M=D
	@SP
	D=M+1
	@SP
	M=D
// return
	@LCL
	D=M
	@R14
	M=D
	@R14
	D=M
	@5
	A=D-A
	D=M
	@R15
	M=D
	@SP
	D=M-1
	@SP
	M=D
	@SP
	A=M
	D=M
	@ARG
	A=M
	M=D
	@ARG
	D=M+1
	@SP
	M=D
	@R14
	D=M
	@1
	A=D-A
	D=M
	@THAT
	M=D
	@R14
	D=M
	@2
	A=D-A
	D=M
	@THIS
	M=D
	@R14
	D=M
	@3
	A=D-A
	D=M
	@ARG
	M=D
	@R14
	D=M
	@4
	A=D-A
	D=M
	@LCL
	M=D
	@R15
	A=M
	0;JMP
// label IF_FALSE
(IF_FALSE)
// push argument 0
	@0
	D=A
	@ARG
	A=M+D
	D=M
	@SP
	A=M
	M=D
	@SP
	D=M+1
	@SP
	M=D
// push constant 2
	@2
	D=A
	@SP
	A=M
	M=D
	@SP
	D=M+1
	@SP
	M=D
// sub
	@SP
	D=M-1
	@SP
	M=D
	@SP
	A=M
	D=M
	@SP
	A=M-1
	M=M-D
// call Main.fibonacci 1
	@RETURN_ADDRESS_2
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@5
	D=A
	@1
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Main.fibonacci
	0;JMP
(RETURN_ADDRESS_2)
// push argument 0
	@0
	D=A
	@ARG
	A=M+D
	D=M
	@SP
	A=M
	M=D
	@SP
	D=M+1
	@SP
	M=D
// push constant 1
	@1
	D=A
	@SP
	A=M
	M=D
	@SP
	D=M+1
	@SP
	M=D
// sub
	@SP
	D=M-1
	@SP
	M=D
	@SP
	A=M
	D=M
	@SP
	A=M-1
	M=M-D
// call Main.fibonacci 1
	@RETURN_ADDRESS_4
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@5
	D=A
	@1
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Main.fibonacci
	0;JMP
(RETURN_ADDRESS_4)
// add
	@SP
	D=M-1
	@SP
	M=D
	@SP
	A=M
	D=M
	@SP
	A=M-1
	M=D+M
// return
	@LCL
	D=M
	@R14
	M=D
	@R14
	D=M
	@5
	A=D-A
	D=M
	@R15
	M=D
	@SP
	D=M-1
	@SP
	M=D
	@SP
	A=M
	D=M
	@ARG
	A=M
	M=D
	@ARG
	D=M+1
	@SP
	M=D
	@R14
	D=M
	@1
	A=D-A
	D=M
	@THAT
	M=D
	@R14
	D=M
	@2
	A=D-A
	D=M
	@THIS
	M=D
	@R14
	D=M
	@3
	A=D-A
	D=M
	@ARG
	M=D
	@R14
	D=M
	@4
	A=D-A
	D=M
	@LCL
	M=D
	@R15
	A=M
	0;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
	@4
	D=A
	@SP
	A=M
	M=D
	@SP
	D=M+1
	@SP
	M=D
// call Main.fibonacci 1
	@RETURN_ADDRESS_6
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@5
	D=A
	@1
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Main.fibonacci
	0;JMP
(RETURN_ADDRESS_6)
// label WHILE
(WHILE)
// goto WHILE
	@WHILE
	0;JMP
