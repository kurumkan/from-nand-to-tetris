class PongGame {
	field Board board; 	
	field String boardDirection;	

	field Ball ball; 	
	field int ballX, ballY, rad, dx, dy;

	field Score score;	

	field int bootomLine;
	
	constructor PongGame new() {							
		let bootomLine = 235;
		let board = Board.new(0, 220, 50);
		let boardDirection = 1;

		let ballX = 55;
		let ballY = 55;	
		let rad = 5;
		let dx = 1;
		let dy = 1;
		let ball = Ball.new(50, 50, rad);

		let score = Score.new(0, 22);

		return this;
	}
	
	method void dispose() {
		do board.dispose();		
		do ball.dispose();		
		do score.dispose();		

		do Memory.deAlloc(this);
		return;
	}
	
	method void moveBoard() {
		if (boardDirection = 0) { 
			do board.moveLeft(); 			
		}
		if (boardDirection = 1) { 
			do board.moveRight(); 			
		}				

		do Sys.wait(1);
		return;
	}

	method void moveBall() {	
		var int boardX, boardY, boardWidth;

		do ball.move(ballX, ballY);
		
		if(ballX - rad = 1) {
			let dx = -dx;
		} 
		if(ballX + rad = 510) {
			let dx = -dx;	
		}
		if(ballY - rad = 1) {
			let dy = -dy;
		}		
		
		
		let boardX = board.getX();
		let boardY = board.getY();
		let boardWidth = board.getWidth();

		if(
			((ballY + rad) = (boardY - 1)) &
			(ballX > boardX) &
			(ballX < (boardX + boardWidth))
		) {	
			do score.inc();		
			let dy = -dy;			
		}
		if(ballY + rad = bootomLine) { 
			do Output.moveCursor(10, 26);
			do Output.printString("Game over!");			
			do Sys.halt();
		}
		

		let ballX = ballX + dx;
		let ballY = ballY + dy;
		
		do Sys.wait(7);

		return;
	}

	method void render() {
		do Screen.setColor(true);
      	do Screen.drawRectangle(0, bootomLine, 510, bootomLine + 2);

		do moveBall();
		do moveBoard();		
		do score.render();		
		return;
	}
	
	method void run() {
		var char key; 
		var boolean exit;
		let exit = false;

		while (~exit) {			
			while (key = 0) {
				let key = Keyboard.keyPressed();
				do render();
			}			
			
			if (key = 81) { // q key  
				let exit = true; 
			}     
			if (key = 130) { 
				let boardDirection = 0; 
			}
			if (key = 132) { 
				let boardDirection = 1; 
			}
		
			while (~(key = 0)) {
				let key = Keyboard.keyPressed();
				do render();
			}
		}

		return;
	}
}



