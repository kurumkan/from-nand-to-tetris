/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in = instruction[15], out = isAInstruction);
    Mux16(a = outALU, b = instruction, sel = isAInstruction, out = inA);
    
    // addressM
    Or(a = isAInstruction, b = instruction[5], out = loadA); // instruction[5] === d1 (should write to A register?)
    Register(in = inA, load = loadA, out = A, out[0..14] = addressM);

    And(a = instruction[15], b = instruction[12], out = isM); // instruction[12] === a bit of c instruction
    Mux16(a = A, b = inM, sel = isM, out = AM); 

    And(a = instruction[15], b = instruction[4], out = writeD); // instruction[4] === d2 (should write to D register?)
    Register(in = outALU, load = writeD, out = D); 
    
    // outM
    ALU(
        x=D, 
        y=AM, 
        zx = instruction[11], // c1
        nx = instruction[10], // c2
        zy = instruction[9],  // c3
        ny = instruction[8],  // c4
        f = instruction[7],   // c5
        no = instruction[6],  // c6
        out = outM, 
        out = outALU,
        zr = zr, 
        ng = ng
    );


    // writeM?
    And(a=instruction[15], b=instruction[3], out=writeM); // instruction[3] === d3 (should write to RAM?)

    // PC   
    // load logic

    // isPositive?
    Or(a = zr, b = ng, out = le);
    Not(in = le, out = pz);

    And(a = ng, b = instruction[2], out = j0);
    And(a = zr, b = instruction[1], out = j1);
    And(a = pz, b = instruction[0], out = j2);

    Or(a = j0, b = j1, out = orj0j1);
    Or(a = orj0j1, b = j2, out = shouldJump);

    And(a = instruction[15], b = shouldJump, out = load);

    // inc logic    
    Not(in = load, out = inc);    

    PC(in = A, load = load, inc = inc, reset = reset, out[0..14] = pc);
}